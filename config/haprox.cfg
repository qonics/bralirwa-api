sudo tee /etc/haproxy/haproxy.cfg <<EOF
global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHA>
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    log     global
    option  redispatch
    option  forwardfor
    option  http-server-close
    option  httplog
    # option  dontlognull
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 1m
    timeout server 1m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http



frontend http_front
    bind *:80
    # bind *:443 ssl crt /etc/ssl/private/your_cert.pem

    # ACLs for domain separation
    acl host_lottery hdr(host) -i testing.rw bralirwa.testing.rw
    acl host_qonics hdr(host) -i qonics.com

    # ACLs for path-based routing
    acl is_api path_beg /api /api/
    mode http

    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"
    # Use backends based on host and path
    use_backend lottery_api_backend if host_lottery is_api
    use_backend lottery_main_backend if host_lottery
    use_backend qonics_api_backend if host_qonics is_api
    use_backend qonics_main_backend if host_qonics
    default_backend default_backend

backend lottery_api_backend
    mode http
    balance roundrobin
    http-request set-path %[path,regsub(^/api/,/)]
    server lottery_api1 127.0.0.1:30081 check
    # server swiftqom_api2 <LOTTERY_API_IP_2>:30080 check

backend lottery_main_backend
    mode http
    balance roundrobin
    server lottery_web1 127.0.0.1:30801 check
    # server swiftqom_web2 <LOTTERY_WEB_IP_2>:30800 check

backend qonics_api_backend
    mode http
    balance roundrobin
    server qonics_api1 127.0.0.1:30090 check
    # server qonics_api2 <QONICS_API_IP_2>:30090 check

backend qonics_main_backend
    mode http
    balance roundrobin
    server qonics_web1 127.0.0.1:30900 check
    # server qonics_web2 <QONICS_WEB_IP_2>:30900 check

#display custom page for error and run to port 30081
backend default_backend
    mode http
    balance roundrobin
    server default1 127.0.0.1:30800 check
EOF